version: 2.1

parameters:
  used:
    type: boolean
    default: true

executors:
# environment that jobs will run in
  builder:
    docker:
      - image: toodleloo/builder:latest
        # auth:
        #   username: $ECR_USER
        #   password: $ECR_PASSWORD

commands:
# re-usable code snippets jobs can call
  install:
    parameters:
      prod:
        type: boolean
        default: false
    steps:
      - when:
          condition: << parameters.prod >>
          steps:
            - run: yarn --prod
      - unless:
          condition: << parameters.prod >>
          steps:
            - run: yarn
  allow-develop-diffs:
  # allows git diffs with develop
    steps:
      - run: |
          COMMIT_ID=$(git rev-parse HEAD)
          git checkout develop
          git checkout $COMMIT_ID

jobs:
# chunks of code run on an executor, see https://circleci.com/docs/2.0/jobs-steps/#jobs-overview
  no-op:
    executor: builder
    resource_class: small
    steps:
      - run: echo no-op
  run-all:
    executor: builder
    resource_class: small
    steps:
      - run: echo run-all
  build:
    executor: builder
    steps:
      - checkout
      - install
      - persist_to_workspace:
          root: .
          paths:
            - .
  unit-test:
    executor: builder
    steps:
      - attach_workspace:
          at: .
      - allow-develop-diffs
      - run: |
          scope=$(./build-scripts/get-packages-to-test.sh)
          scopeArgs=$(printf %s "${scope[@]/#/ --scope }")
          [ ! "$scopeArgs" = "" ] && yarn test:unit $scope
  build-image:
    executor: builder
    steps:
      - attach_workspace:
          at: .
      - setup_remote_docker
      - run: docker build -t app-sum:latest apps/app-sum
  show-images:
    executor: builder
    steps:
#      - setup_remote_docker
      - run: docker images

workflows:
# high level tasks performed automatically/scheduled
# every workflow will run on every commit unless filtered by branch
  version: 2
  no-op:
    unless: << pipeline.parameters.used >>
    jobs:
      - no-op
  run-all:
    when: << pipeline.parameters.used >>
    jobs:
      - run-all
  test:
    unless: << pipeline.parameters.used >>
    jobs:
      - build:
          filters:
            branches:
              ignore:
                - master
                - develop
      - unit-test:
          requires:
            - build
  images-test:
    when: << pipeline.parameters.used >>
    jobs:
      - build
      - build-image:
          requires:
            - build
      - show-images:
          requires:
            - build-image
