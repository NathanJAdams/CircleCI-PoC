version: 2.1

parameters:
  used:
    type: boolean
    default: true

executors:
# environment that jobs will run in
  builder:
    docker:
      - image: toodleloo/builder:latest
        # auth:
        #   username: ${ECR_USER}
        #   password: ${ECR_PASSWORD}
  tester:
    docker:
      - image: toodleloo/builder:latest
  deployer:
    docker:
      - image: node:12.20.1-alpine3.12

commands:
# re-usable code snippets jobs can call
  install:
    parameters:
      prod:
        type: boolean
        default: false
    steps:
      - when:
          condition: << parameters.prod >>
          steps:
            - run: yarn --prod
      - unless:
          condition: << parameters.prod >>
          steps:
            - run: yarn
  unit-test:
    parameters:
      scope:
        type: string
        default: ""
    steps:
      - run: yarn test:unit << parameters.scope >>
  integration-test:
    parameters:
      scope:
        type: string
        default: ""
    steps:
      - run: yarn test:integration << parameters.scope >>
  docker-login:
    parameters:
      user-name:
        type: string
      password:
        type: string
    steps:
      - run: docker login -u << parameters.user-name >> -p << parameters.password >>
  update-image:
    parameters:
      folder:
        type: string
      image-name:
        type: string
      tag:
        type: string
    steps:
      - run: docker build -t << parameters.image-name >>:<< parameters.tag >> << parameters.folder >>
      - run: docker push << parameters.image-name >>:<< parameters.tag >>

jobs:
# chunks of code run on an executor, see https://circleci.com/docs/2.0/jobs-steps/#jobs-overview
  no-op:
    executor: tester
    resource_class: small
    steps:
      - run: echo no-op
  run-all:
    executor: tester
    resource_class: small
    steps:
      - run: echo run-all
  build:
    executor: tester
    resource_class: medium
    steps:
      - checkout
      - install
      - persist_to_workspace:
          root: .
          paths:
            - .
  unit-test:
    executor: tester
    resource_class: medium
    parameters:
      scope:
        type: string
        default: ""
    steps:
      - attach_workspace:
          at: .
      - unit-test:
          scope: << parameters.scope >>
  integration-test:
    executor: tester
    resource_class: medium
    parameters:
      scope:
        type: string
        default: ""
    steps:
      - attach_workspace:
          at: .
      - integration-test:
          scope: << parameters.scope >>
  update-all-images:
    docker:
      - image: circleci/golang:1.15
    resource_class: medium
    steps:
      - attach_workspace:
          at: .
      - setup_remote_docker
      - docker-login:
          user-name: $SUPER_SECRET_USERNAME
          password: $SUPER_SECRET_PASSWORD
      - update-image:
          folder: apps/app-multiply
          image-name: ${SUPER_SECRET_USERNAME}/app-multiply
          tag: latest
      - update-image:
          folder: apps/app-sum
          image-name: ${SUPER_SECRET_USERNAME}/app-sum
          tag: latest

workflows:
# high level tasks performed automatically/scheduled
  version: 2
  no-op:
    unless: << pipeline.parameters.used >>
    jobs:
      - no-op
  run-all:
    when: << pipeline.parameters.used >>
    jobs:
      - run-all
  test-features:
    when: << pipeline.parameters.used >>
    jobs:
      - build:
          filters:
            branches:
              only: /feature\/.*/
      - unit-test:
          requires:
            - build
      - integration-test:
          filters:
            branches:
              only: /feature\/integration.*/
          requires:
            - build
  incremental-build-images-on-develop-change:
    when: << pipeline.parameters.used >>
    jobs:
      - build:
          filters:
            branches:
              only: master
      - update-all-images:
          context: docker
          requires:
            - build
